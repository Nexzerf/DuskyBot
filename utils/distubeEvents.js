const { EmbedBuilder } = require('discord.js');
const { emojis } = require('../config/emojis');
const util = require('util');

exports.handleDistubeEvents = (client) => {
  const distube = client.distube;

  const safeSend = (channel, payload) => {
    if (channel && typeof channel.send === 'function') {
      channel.send(payload).catch(console.error);
    } else {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô channel ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ:', payload);
    }
  };

  distube.on('playSong', (queue, song) => {
    const embed = new EmbedBuilder()
      .setColor('#3333FF')
      .setTitle(`${emojis.play} **‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á**`)
      .setDescription(`[${song.name}](${song.url})`)
      .addFields({
        value: `üïí ${song.formattedDuration} „Éª üôã‚Äç‚ôÇÔ∏è ${song.user}`,
        inline: true,
      })
      .setThumbnail(song.thumbnail)
      .setFooter({ text: `üîà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏á: ${queue.volume}%` });

    safeSend(queue.textChannel, { embeds: [embed] });
  });

  distube.on('addSong', (queue, song) => {
    const embed = new EmbedBuilder()
      .setColor('#3333FF')
      .setTitle(`‚ûï **‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß**`)
      .setDescription(`[${song.name}](${song.url})`)
      .addFields({
        name: '‡∏Ç‡∏≠‡πÄ‡∏û‡∏•‡∏á‡πÇ‡∏î‡∏¢',
        value: `„Éª üôã‚Äç‚ôÇÔ∏è ${song.user}`,
        inline: true,
      })
      .setThumbnail(song.thumbnail);

    safeSend(queue.textChannel, { embeds: [embed] });
  });

  distube.on('addList', (queue, playlist) => {
    const embed = new EmbedBuilder()
      .setColor('#3333FF')
      .setTitle(`${emojis.playlist} **‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß**`)
      .setDescription(`[${playlist.name}](${playlist.url})`)
      .addFields({
        name: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå',
        value: `üéµ ${playlist.songs.length} ‡πÄ‡∏û‡∏•‡∏á „Éª üôã‚Äç‚ôÇÔ∏è ${playlist.user}`,
        inline: true,
      })
      .setThumbnail(playlist.thumbnail);

    safeSend(queue.textChannel, { embeds: [embed] });
  });

  distube.on('error', (channelOrQueue, error) => {
    console.error(error);
    const safeMessage = typeof error?.message === 'string'
      ? error.message
      : util.inspect(error, { depth: 1 });

    const channel = channelOrQueue?.textChannel ?? channelOrQueue;

    const embed = new EmbedBuilder()
      .setColor('#FF5555')
      .setTitle(`${emojis.error || '‚ùå'} ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î`)
      .setDescription(`\`\`\`\n${safeMessage.slice(0, 1997)}\n\`\`\``);

    safeSend(channel, { embeds: [embed] });
  });

  distube.on('finish', (queue) => {
    const embed = new EmbedBuilder()
      .setColor('#3333ff')
      .setTitle(`üíø ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß`);

    safeSend(queue.textChannel, { embeds: [embed] });
  });

  distube.on('disconnect', (queue) => {
    const embed = new EmbedBuilder()
      .setColor('#3333ff')
      .setTitle('üõë ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß')
      .setDescription('üö™ ‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß\n**‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î** üîí');

    safeSend(queue.textChannel, { embeds: [embed] });
  });

  distube.on('empty', (queue) => {
    const embed = new EmbedBuilder()
      .setColor('#3333ff')
      .setTitle('üåå ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤')
      .setDescription('üëª ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß\n**‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...**');

    safeSend(queue.textChannel, { embeds: [embed] });
  });
};
