const {
  SlashCommandBuilder,
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ComponentType,
} = require('discord.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('worktime')
    .setDescription('‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö')
    .addIntegerOption(option =>
      option.setName('‡∏≠‡πà‡∏≤‡∏ô')
        .setDescription('‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πà‡∏≤‡∏ô (‡∏ô‡∏≤‡∏ó‡∏µ)')
        .setRequired(true))
    .addIntegerOption(option =>
      option.setName('‡∏û‡∏±‡∏Å')
        .setDescription('‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å (‡∏ô‡∏≤‡∏ó‡∏µ)')
        .setRequired(true)),

  async execute(interaction) {
    const readMinutes = interaction.options.getInteger('‡∏≠‡πà‡∏≤‡∏ô');
    const breakMinutes = interaction.options.getInteger('‡∏û‡∏±‡∏Å');
    const user = interaction.user;

    let readingTimeout, breakTimeout;
    let isStopped = false;

    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId('stop_timer')
        .setLabel('üõë ‡∏´‡∏¢‡∏∏‡∏î')
        .setStyle(ButtonStyle.Danger),
      new ButtonBuilder()
        .setCustomId('reset_timer')
        .setLabel('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà')
        .setStyle(ButtonStyle.Secondary)
    );

    const startEmbed = new EmbedBuilder()
      .setTitle('üìö ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πà‡∏≤‡∏ô/‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß')
      .setDescription(`> üïí ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πà‡∏≤‡∏ô: **${readMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ**\n> ‚òï ‡∏û‡∏±‡∏Å: **${breakMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ**\n\nüë§ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏î‡∏¢: ${user}`)
      .setColor(0x00B894)
      .setFooter({ text: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πà‡∏≤‡∏ô' });

    const message = await interaction.reply({ embeds: [startEmbed], components: [row], fetchReply: true });

    // ‡∏õ‡∏∏‡πà‡∏° listener
    const collector = message.createMessageComponentCollector({
      componentType: ComponentType.Button,
      time: (readMinutes + breakMinutes) * 60000, // ‡∏õ‡∏¥‡∏î collector ‡∏´‡∏•‡∏±‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤
    });

    collector.on('collect', async i => {
      if (i.user.id !== user.id) {
        return i.reply({ content: '‚õî ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏™‡∏¥‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ', ephemeral: true });
      }

      if (i.customId === 'stop_timer') {
        isStopped = true;
        clearTimeout(readingTimeout);
        clearTimeout(breakTimeout);

        const stoppedEmbed = new EmbedBuilder()
          .setTitle('üõë ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πà‡∏≤‡∏ô/‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß')
          .setDescription(`‡∏Ñ‡∏∏‡∏ì‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\n‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏ô‡πâ‡∏≤‡∏≤ üçÉ`)
          .setColor(0xD63031);

        await i.update({ embeds: [stoppedEmbed], components: [] });
        collector.stop();
      }

      if (i.customId === 'reset_timer') {
        isStopped = true;
        clearTimeout(readingTimeout);
        clearTimeout(breakTimeout);

        const resetEmbed = new EmbedBuilder()
          .setTitle('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß')
          .setDescription(`‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà...\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á \`/worktime\` ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà`)
          .setColor(0x6C5CE7)
          .setTimestamp();

        await i.update({ embeds: [resetEmbed], components: [] });
        collector.stop();
      }
    });

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πà‡∏≤‡∏ô
    readingTimeout = setTimeout(async () => {
      if (isStopped) return;

      const endReadEmbed = new EmbedBuilder()
        .setTitle('‚è∞ ‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß')
        .setDescription(`> ‡πÑ‡∏î‡πâ‡πÄ‡∏ß‡∏•‡∏≤ **‡∏û‡∏±‡∏Å ${breakMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ** ‡πÅ‡∏•‡πâ‡∏ß\n\nüìö ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å ‡πÄ‡∏Å‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î!`)
        .setColor(0xE17055);

      await interaction.followUp({ embeds: [endReadEmbed] });

      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å
      breakTimeout = setTimeout(async () => {
        if (isStopped) return;

        const endBreakEmbed = new EmbedBuilder()
          .setTitle('‚òï ‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß')
          .setDescription(`> ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á? ‚ú®\n\n‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏û‡∏±‡∏Å‡∏™‡∏≤‡∏¢‡∏ï‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≤‡∏≤`)
          .setColor(0xA1887F);

        await interaction.followUp({ embeds: [endBreakEmbed] });

      }, breakMinutes * 60000);

    }, readMinutes * 60000);
  }
};
