const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder, StringSelectMenuOptionBuilder } = require('discord.js');

function getRandomNumber(digits) {
  let min = Math.pow(10, digits - 1);
  let max = Math.pow(10, digits) - 1;
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

module.exports = {
  data: new SlashCommandBuilder()
    .setName('lottoguess')
    .setDescription('‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏´‡∏ß‡∏¢‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å'),

  async execute(interaction) {
    
    const menu = new StringSelectMenuBuilder()
      .setCustomId('lotto-type-select')
      .setPlaceholder('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£')
      .addOptions(
        new StringSelectMenuOptionBuilder().setLabel('‡∏´‡∏ß‡∏¢ 2 ‡∏ï‡∏±‡∏ß').setValue('two'),
        new StringSelectMenuOptionBuilder().setLabel('‡∏´‡∏ß‡∏¢ 3 ‡∏ï‡∏±‡∏ß').setValue('three'),
        new StringSelectMenuOptionBuilder().setLabel('‡∏´‡∏ß‡∏¢ 6 ‡∏ï‡∏±‡∏ß').setValue('six'),
        new StringSelectMenuOptionBuilder().setLabel('‡∏´‡∏ß‡∏¢‡∏ö‡∏ô').setValue('up'),
        new StringSelectMenuOptionBuilder().setLabel('‡∏´‡∏ß‡∏¢‡∏•‡πà‡∏≤‡∏á').setValue('down'),
      );

    const row = new ActionRowBuilder().addComponents(menu);

    const embed = new EmbedBuilder()
      .setTitle('üé≤ ‡∏Ç‡∏≠‡πÄ‡∏•‡∏Ç‡∏´‡∏ß‡∏¢')
      .setDescription('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á')
      .setColor('#3333ff');

    await interaction.reply({ embeds: [embed], components: [row], ephemeral: true });
  },

  
  async handleSelect(interaction) {
    if (!interaction.isStringSelectMenu()) return;
    if (interaction.customId !== 'lotto-type-select') return;

    const selected = interaction.values[0];

    let result = '';
    switch (selected) {
      case 'two':
        result = getRandomNumber(2).toString().padStart(2, '0');
        break;
      case 'three':
        result = getRandomNumber(3).toString();
        break;
      case 'six':
        result = getRandomNumber(6).toString().padStart(6, '0');
        break;
      case 'up':
        // ‡∏´‡∏ß‡∏¢‡∏ö‡∏ô 3 ‡∏ï‡∏±‡∏ß + 2 ‡∏ï‡∏±‡∏ß (‡∏™‡∏°‡∏°‡∏ï‡∏¥)
        const up3 = getRandomNumber(3).toString();
        const up2 = getRandomNumber(2).toString().padStart(2, '0');
        result = `3 ‡∏ï‡∏±‡∏ß‡∏ö‡∏ô: ${up3}\n2 ‡∏ï‡∏±‡∏ß‡∏ö‡∏ô: ${up2}`;
        break;
      case 'down':
        // ‡∏´‡∏ß‡∏¢‡∏•‡πà‡∏≤‡∏á 2 ‡∏ï‡∏±‡∏ß (‡∏™‡∏°‡∏°‡∏ï‡∏¥)
        result = getRandomNumber(2).toString().padStart(2, '0');
        break;
      default:
        result = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å';
        break;
    }

    const embed = new EmbedBuilder()
      .setTitle('üé≤ ‡πÄ‡∏•‡∏Ç‡∏´‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì')
      .setColor('#3333ff')
      .setDescription(result)
      .setTimestamp();

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö (update) ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°
    await interaction.update({ embeds: [embed], components: [] });
  }
};
