const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');

const gradeMap = {
  'A': 4.0,
  'B+': 3.5,
  'B': 3.0,
  'C+': 2.5,
  'C': 2.0,
  'D+': 1.5,
  'D': 1.0,
  'F': 0.0
};

module.exports = {
  data: new SlashCommandBuilder()
    .setName('grade')
    .setDescription('‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì GPA / GPAX ‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏£‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡∏°‡∏≤')
    .addStringOption(option =>
      option.setName('‡πÄ‡∏Å‡∏£‡∏î')
        .setDescription('‡πÉ‡∏™‡πà‡πÄ‡∏Å‡∏£‡∏î ‡πÄ‡∏ä‡πà‡∏ô A B+ C F (‡∏Å‡∏£‡∏ì‡∏µ‡πÉ‡∏™‡πà‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡πÅ‡∏ö‡∏ö A:3 B+:4 C:2)')
        .setRequired(true)
    )
    .addBooleanOption(option =>
      option.setName('‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏ó‡∏≠‡∏°')
        .setDescription('‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏£‡∏î‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏ó‡∏≠‡∏° ‡πÉ‡∏´‡πâ‡∏Ñ‡∏±‡πà‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ó‡∏≠‡∏°‡∏î‡πâ‡∏ß‡∏¢ ; ‡πÄ‡∏ä‡πà‡∏ô A:3 B+:4; A B C')
        .setRequired(false)
    ),

  async execute(interaction) {
    const input = interaction.options.getString('‡πÄ‡∏Å‡∏£‡∏î');
    const multiTerm = interaction.options.getBoolean('‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏ó‡∏≠‡∏°') || false;

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏Å‡∏£‡∏î+‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡∏ï‡πÅ‡∏ö‡∏ö "A:3"
    function parseGradesWithCredits(gradesStr) {
      const parts = gradesStr.trim().toUpperCase().split(/\s+/);
      let totalPoint = 0;
      let totalCredit = 0;
      let invalid = [];

      for (const part of parts) {
        if (part.includes(':')) {
          const [grade, creditStr] = part.split(':');
          const credit = Number(creditStr);
          if (gradeMap[grade] !== undefined && !isNaN(credit) && credit > 0) {
            totalPoint += gradeMap[grade] * credit;
            totalCredit += credit;
          } else {
            invalid.push(part);
          }
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡∏ï‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ credit = 1
          if (gradeMap[part] !== undefined) {
            totalPoint += gradeMap[part];
            totalCredit += 1;
          } else {
            invalid.push(part);
          }
        }
      }
      return { totalPoint, totalCredit, invalid };
    }

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏ó‡∏≠‡∏° ‡πÅ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢ ; 
    if (multiTerm) {
      const terms = input.split(';').map(t => t.trim());
      let sumPoint = 0;
      let sumCredit = 0;
      let invalidAll = [];

      for (const term of terms) {
        const { totalPoint, totalCredit, invalid } = parseGradesWithCredits(term);
        sumPoint += totalPoint;
        sumCredit += totalCredit;
        if (invalid.length > 0) invalidAll.push(...invalid);
      }

      if (sumCredit === 0) {
        return await interaction.reply({ content: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Å‡∏£‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡πÄ‡∏ó‡∏≠‡∏°', ephemeral: true });
      }

      const gpax = (sumPoint / sumCredit).toFixed(2);

      const embed = new EmbedBuilder()
        .setTitle('üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì GPAX ‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏ó‡∏≠‡∏°')
        .setColor('#4CAF50')
        .addFields(
          { name: 'üéì GPAX', value: `${gpax}`, inline: true },
          { name: 'üìö ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡∏ï‡∏£‡∏ß‡∏°', value: `${sumCredit} ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡∏ï`, inline: true },
          { name: 'üìÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ó‡∏≠‡∏°', value: `${terms.length} ‡πÄ‡∏ó‡∏≠‡∏°`, inline: true }
        )
        .setFooter({ text: invalidAll.length > 0 ? `‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${invalidAll.join(', ')}` : '‚úì ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' });

      return await interaction.reply({ embeds: [embed] });
    } 

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏ó‡∏≠‡∏° ‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏Ñ‡πà‡∏ä‡∏∏‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    else {
      const { totalPoint, totalCredit, invalid } = parseGradesWithCredits(input);
      if (totalCredit === 0) {
        return await interaction.reply({ content: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Å‡∏£‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏Å‡∏£‡∏î ‡πÄ‡∏ä‡πà‡∏ô A B+ C F ‡∏´‡∏£‡∏∑‡∏≠ A:3 B+:4 C:2', ephemeral: true });
      }

      const gpa = (totalPoint / totalCredit).toFixed(2);

      const embed = new EmbedBuilder()
        .setTitle('üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì GPA')
        .setColor('#3333ff')
        .addFields(
          { name: 'üéì GPA', value: `${gpa}`, inline: true },
          { name: 'üìö ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡∏ï‡∏£‡∏ß‡∏°', value: `${totalCredit}`, inline: true }
        )
        .setFooter({ text: invalid.length > 0 ? `‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${invalid.join(', ')}` : '‚úì ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' });

      return await interaction.reply({ embeds: [embed] });
    }
  }
};
