const { SlashCommandBuilder } = require('discord.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('calc')
    .setDescription('‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏¥‡∏î‡πÄ‡∏•‡∏Ç‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏•‡∏Ç 2 ‡∏ï‡∏±‡∏ß')
    .addNumberOption(option =>
      option.setName('‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å')
        .setDescription('‡πÄ‡∏•‡∏Ç‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà 1')
        .setRequired(true))
    .addStringOption(option =>
      option.setName('‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢')
        .setDescription('‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ö‡∏ß‡∏Å ‡∏•‡∏ö ‡∏Ñ‡∏π‡∏ì ‡∏´‡∏≤‡∏£ ‡∏´‡∏£‡∏∑‡∏≠ ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏±‡∏™')
        .setRequired(true)
        .addChoices(
          { name: '‡∏ö‡∏ß‡∏Å (+)', value: '+' },
          { name: '‡∏•‡∏ö (-)', value: '-' },
          { name: '‡∏Ñ‡∏π‡∏ì (*)', value: '*' },
          { name: '‡∏´‡∏≤‡∏£ (/)', value: '/' },
          { name: '‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏±‡∏™ (%)', value: '%' },
        ))
    .addNumberOption(option =>
      option.setName('‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á')
        .setDescription('‡πÄ‡∏•‡∏Ç‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà 2')
        .setRequired(true)),

  async execute(interaction) {
    const num1 = interaction.options.getNumber('‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å');
    const operator = interaction.options.getString('‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢');
    const num2 = interaction.options.getNumber('‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏±‡∏™‡∏î‡πâ‡∏ß‡∏¢ 0
    if ((operator === '/' || operator === '%') && num2 === 0) {
      return interaction.reply({ content: '‚ùå ‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏®‡∏π‡∏ô‡∏¢‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ', ephemeral: true });
    }

    let result;

    switch (operator) {
      case '+':
        result = num1 + num2;
        break;
      case '-':
        result = num1 - num2;
        break;
      case '*':
        result = num1 * num2;
        break;
      case '/':
        result = num1 / num2;
        break;
      case '%':
        result = num1 % num2;
        break;
      default:
        return interaction.reply({ content: '‚ùå ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', ephemeral: true });
    }

    await interaction.reply(`üßÆ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á \`${num1} ${operator} ${num2}\` = **${result}**`);
  }
};
